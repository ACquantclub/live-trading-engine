name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Linux GCC",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-12",
            cxx: "g++-12"
          }
        - {
            name: "Linux Clang", 
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang-15",
            cxx: "clang++-15"
          }
        - {
            name: "macOS",
            os: macos-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v4

    - name: Print env
      run: |
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          ${{ matrix.config.cc }} \
          ${{ matrix.config.cxx }} \
          clang-format \
          clang-tidy \
          python3 \
          python3-pip
        
        # Install Conan 2.x (compatible with Python 3.12)
        pip3 install conan>=2.0.5
        
        # Configure Conan
        conan profile detect --force
        conan profile update settings.compiler=${{ matrix.config.cc == 'clang-15' && 'clang' || 'gcc' }} default
        conan profile update settings.compiler.version=${{ matrix.config.cc == 'clang-15' && '15' || '12' }} default

    - name: Install dependencies (macOS)  
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install cmake ninja llvm python3
        
        # Install Conan 2.x (compatible with Python 3.12)
        pip3 install --break-system-packages conan>=2.0.5
        
        # Configure Conan  
        conan profile detect --force
        conan profile update settings.compiler=clang default
        
        # Add LLVM to PATH for clang-format and clang-tidy
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH

    - name: Configure CMake
      run: |
        export CC=${{ matrix.config.cc }}
        export CXX=${{ matrix.config.cxx }}
        
        # Install Conan dependencies
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=${{ matrix.config.build_type }} -s compiler.cppstd=23
        
        # Configure CMake
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake

    - name: Build
      run: |
        cd build
        ninja -v

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.config.name }}
        path: |
          build/unit_test_results.xml
          build/integration_test_results.xml

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          gcc-12 \
          g++-12 \
          clang-format \
          clang-tidy \
          python3 \
          python3-pip
        
        # Install Conan 2.x (compatible with Python 3.12)
        pip3 install conan>=2.0.5
        
        # Configure Conan
        conan profile detect --force  
        conan profile update settings.compiler=gcc default
        conan profile update settings.compiler.version=12 default

    - name: Check formatting
      run: |
        ./scripts/format.sh --check

    - name: Setup build for linting
      run: |
        export CC=gcc-12
        export CXX=g++-12
        
        # Install Conan dependencies
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=23
        
        # Configure CMake for linting
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run static analysis
      run: |
        ./scripts/lint.sh

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          gcc-12 \
          g++-12 \
          python3 \
          python3-pip
        
        # Install Conan 2.x (compatible with Python 3.12)
        pip3 install conan>=2.0.5
        
        # Configure Conan
        conan profile detect --force
        conan profile update settings.compiler=gcc default  
        conan profile update settings.compiler.version=12 default

    - name: Configure and build
      run: |
        export CC=gcc-12
        export CXX=g++-12
        
        # Install Conan dependencies
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=23
        
        # Configure and build
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake
        ninja

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3 